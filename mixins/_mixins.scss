// RTL border radius.
@mixin border-right-radius($radius) {
  border-bottom-left-radius: $radius;
     border-top-left-radius: $radius;
}

@mixin border-left-radius($radius) {
  border-bottom-right-radius: $radius;
     border-top-right-radius: $radius;
}

// RTL framework.
@mixin make-rtl-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-rtl-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: right;
  }
}

@mixin calc-rtl-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      right: percentage(($index / $grid-columns));
      left: auto;
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      right: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      left: percentage(($index / $grid-columns));
      right: auto;
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      left: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-right: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-rtl-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-rtl-grid($class) {
  @include float-rtl-grid-columns($class);
  @include loop-rtl-grid-columns($grid-columns, $class, width);
  @include loop-rtl-grid-columns($grid-columns, $class, pull);
  @include loop-rtl-grid-columns($grid-columns, $class, push);
  @include loop-rtl-grid-columns($grid-columns, $class, offset);
}
